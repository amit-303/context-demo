---
description: 
globs: 
alwaysApply: true
---
---
title: "Code Review Rules"
description: "Code Review Guidelines"
globs:
  - "**/*"
alwaysApply: true
---
# Code Review: React To-Do App

## 1. Functional and Technical Requirements
- The code must align with the product goals and scope defined in the `PRD.md`.
- The implementation should follow the component design and state management guidance provided in `implementation.md`.
- All data must be stored in the browser's `localStorage`.
- The code must not use a backend or external database.
- Ensure `localStorage` read/write operations use safe patterns, such as `try/catch` blocks, to prevent application crashes.
- Verify that the core features—add, edit, toggle complete, delete, filtering, and persistence—are implemented and functional, without duplicating logic or UI elements across components.

## 2. Code Quality and Style
- The code must use React functional components and hooks.
- State should be managed immutably, and the code should avoid direct mutation.
- Components should follow the single responsibility principle: avoid mixing rendering, editing, and logic-heavy concerns within a single component.
- Avoid excessive prop drilling. Use React Context or local component encapsulation where appropriate.
- Variable and function names must use `camelCase`, and component names must use `PascalCase`.
- Code should be clean, modular, and well-commented, with clear separation of concerns and minimal redundancy in logic or state.
- Use CSS classes consistently; avoid mixing with inline styles unless necessary.

## 3. Documentation and UI/UX
- Generated documentation and code should not duplicate information from `PRD.md` or `ui_ux.md`.
- The UI and interactions should be consistent with the design guidelines in `ui_ux.md`.
- All generated Markdown files must be formatted using clear headings, bullet points, and a concise, consistent tone.
- Each component’s purpose and props should be documented either inline or in the implementation guide.

## 4. Testing and Bug Handling
- The code must include basic automated unit tests that cover main user flows and `localStorage` persistence.
- Tests should cover common bug scenarios mentioned in `bug_tracking.md`, such as empty input, duplicate IDs, and `localStorage` errors.
- Tests should verify that only one interactive element (e.g., edit form) is rendered at a time.
- Check for notes or comments that indicate where manual review or refinement might be needed.

## 5. Architecture and Maintainability
- Component responsibilities must be clearly scoped; avoid placing shared logic (e.g., editing functionality) in multiple components simultaneously.
- Shared state logic (e.g., edit state) should be abstracted using custom React hooks or Context to reduce prop drilling and improve maintainability.
- Separate presentational and container logic into different components when applicable.
- Structure code to be modular, reusable, and easy to test.